{% style %}
.section-{{ section.id }}-padding {
  padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
  padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
}

@media screen and (min-width: 750px) {
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top }}px;
    padding-bottom: {{ section.settings.padding_bottom }}px;
  }
}

.image-grid-hero {
  position: relative;
  overflow: hidden;
}

.image-grid-hero__grid {
  display: grid;
  grid-template-columns: repeat(8, 1fr);
  grid-auto-rows: minmax(100px, auto);
  gap: 10px;
}

.image-grid-hero__item {
  position: relative;
  overflow: hidden;
  aspect-ratio: 1 / 1;
}

.image-grid-hero__item--main {
  grid-column: span 4;
  grid-row: span 2;
  aspect-ratio: 2 / 1;
}

.image-grid-hero__item:nth-child(2),
.image-grid-hero__item:nth-child(3) {
  grid-column: span 2;
}

.image-grid-hero__item:nth-child(n+4) {
  grid-column: span 2;
}

.image-grid-hero__image-container {
  position: relative;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

.image-grid-hero__image {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 200%;
  object-fit: cover;
}

.image-grid-hero__content {
  position: absolute;
  bottom: 20px;
  left: 20px;
  color: #ffffff;
  text-shadow: 1px 1px 3px rgba(0,0,0,0.3);
  z-index: 10;
}

.image-grid-hero__title {
  font-size: 2.5rem;
  margin-bottom: 0.5rem;
}

.image-grid-hero__subtitle {
  font-size: 1.2rem;
  margin-bottom: 1rem;
}

.image-grid-hero__button {
  display: inline-block;
  padding: 10px 20px;
  background-color: {{ section.settings.button_color }};
  color: {{ section.settings.button_text_color }};
  text-decoration: none;
  border-radius: 5px;
  transition: background-color 0.3s ease;
}

.image-grid-hero__button:hover {
  background-color: {{ section.settings.button_hover_color }};
}

@media screen and (max-width: 749px) {
  .image-grid-hero__grid {
    grid-template-columns: 1fr 1fr;
  }
  
  .image-grid-hero__item--main {
    grid-column: span 2;
    aspect-ratio: 16 / 9;
  }

  .image-grid-hero__item:nth-child(n+2) {
    grid-column: span 1;
  }
}
{% endstyle %}

<div class="image-grid-hero section-{{ section.id }}-padding">
  <div class="image-grid-hero__grid">
    {% for block in section.blocks %}
      <div class="image-grid-hero__item{% if forloop.first %} image-grid-hero__item--main{% endif %}" {{ block.shopify_attributes }}>
        <div class="image-grid-hero__image-container">
          {% if block.settings.image != blank %}
            {{ block.settings.image | image_url: width: 1500 | image_tag:
              loading: 'lazy',
              class: 'image-grid-hero__image',
              sizes: '(min-width: 750px) 50vw, 100vw'
            }}
          {% else %}
            {{ 'lifestyle-1' | placeholder_svg_tag: 'placeholder-svg image-grid-hero__image' }}
          {% endif %}
        </div>
        
        {% if forloop.first %}
          <div class="image-grid-hero__content">
            <h2 class="image-grid-hero__title">{{ section.settings.title | escape }}</h2>
            <p class="image-grid-hero__subtitle">{{ section.settings.subtitle | escape }}</p>
            {% if section.settings.button_label != blank %}
              <a href="{{ section.settings.button_link }}" class="image-grid-hero__button">
                {{ section.settings.button_label | escape }}
              </a>
            {% endif %}
          </div>
        {% endif %}
      </div>
    {% endfor %}
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const imageContainers = document.querySelectorAll('.image-grid-hero__image-container');
  
  imageContainers.forEach(container => {
    const image = container.querySelector('.image-grid-hero__image');
    let start;
    let animationFrameId;

    function step(timestamp) {
      if (start === undefined) {
        start = timestamp;
      }
      const elapsed = timestamp - start;
      
      // Complete cycle every 10 seconds
      const position = (elapsed % 10000) / 10000;
      
      // Move from 0% to -50% and back
      const yPos = Math.sin(position * Math.PI) * -50;
      
      image.style.transform = `translateY(${yPos}%)`;
      
      animationFrameId = requestAnimationFrame(step);
    }
    
    animationFrameId = requestAnimationFrame(step);
    
    // Optional: Pause animation on hover
    container.addEventListener('mouseenter', () => cancelAnimationFrame(animationFrameId));
    container.addEventListener('mouseleave', () => {
      start = undefined;
      animationFrameId = requestAnimationFrame(step);
    });
  });
});
</script>

{% schema %}
{
  "name": "Image Grid Hero",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "default": "STYLE THAT PERFORMS",
      "label": "Title"
    },
    {
      "type": "text",
      "id": "subtitle",
      "default": "Improve your performance with our products.",
      "label": "Subtitle"
    },
    {
      "type": "text",
      "id": "button_label",
      "default": "Shop Best Sellers",
      "label": "Button label"
    },
    {
      "type": "url",
      "id": "button_link",
      "label": "Button link"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button color",
      "default": "#FFD700"
    },
    {
      "type": "color",
      "id": "button_text_color",
      "label": "Button text color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "button_hover_color",
      "label": "Button hover color",
      "default": "#FFA500"
    },
    {
      "type": "header",
      "content": "Section padding"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Padding bottom",
      "default": 36
    }
  ],
  "blocks": [
    {
      "type": "image",
      "name": "Image",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Image Grid Hero",
      "blocks": [
        {
          "type": "image"
        },
        {
          "type": "image"
        },
        {
          "type": "image"
        },
        {
          "type": "image"
        },
        {
          "type": "image"
        },
        {
          "type": "image"
        },
        {
          "type": "image"
        }
      ]
    }
  ]
}
{% endschema %}